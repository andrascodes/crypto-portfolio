{
  "folders": [
    {
      "name": "Server",
      "path": "."
    }
  ],
  "extensions": {
    "recommendations": [
      // Debuggers
      "ms-vscode.node-debug2",
      // Uses our prettier inside of VSCode as a formatter
      "esbenp.prettier-vscode",
      // Official ESLint
      "dbaeumer.vscode-eslint",
      // Dotenv syntax
      "mikestead.dotenv",
      // Github's official extension
      "github.vscode-pull-request-github",

      // Official jest
      "orta.vscode-jest",

      // Extra small jest runner
      "firsttris.vscode-jest-runner"

      // Prisma
      // "prisma.prisma",

      // Handful browsing of the database from VSCode
      // "mtxr.sqltools",
      // "mtxr.sqltools-driver-pg",

      // Extended Yaml support
      // "redhat.vscode-yaml"
    ]
  },

  "settings": {
    // defaultFormatter: prettier for supported languages
    "editor.defaultFormatter": "esbenp.prettier-vscode",

    // Override some specific user settings that you might have.
    "[typescriptreact]": {
      "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[typescript]": {
      "editor.defaultFormatter": "esbenp.prettier-vscode"
    },

    // Disable the built-in formatters as we're using prettier
    "javascript.format.enable": false,
    "typescript.format.enable": false,

    // defaultFormatter: exceptions
    // "[sql]": {
    //   "editor.formatOnSave": false,
    //   "editor.defaultFormatter": "mtxr.sqltools"
    // },

    // Format every file by default
    "editor.formatOnSave": true,
    "[html]": {
      "editor.formatOnSave": false
    },

    // These already are prettier's defaults
    "editor.tabSize": 2,
    "files.eol": "\n",
    "prettier.endOfLine": "lf",

    "editor.codeActionsOnSave": {
      "source.fixAll.eslint": true
    },

    "eslint.packageManager": "yarn",
    "files.associations": {
      // Any file starting with `.env.` is also a dotenv
      ".env.*": "dotenv"
    },

    //   "github.gitAuthentication": true,
    //   "githubIssues.issueBranchTitle": "feature/${issueNumber}-${sanitizedIssueTitle}",
    //   "githubIssues.workingIssueFormatScm": "${issueTitle}\nFixes ${issueNumberLabel}",
    //   "githubIssues.queries": [
    //     {
    //       "label": "Issues assigned to me",
    //       "query": "default"
    //     },
    //     {
    //       "label": "Issues I created",
    //       "query": "author:${user} state:open repo:${owner}/${repository} sort:created-desc"
    //     },
    //     {
    //       "label": "All Open Issues",
    //       "query": "state:open repo:${owner}/${repository} sort:created-desc"
    //     }
    //   ],

    "jest.autoEnable": false,
    // "jest.pathToJest": "yarn test",

    //   "json.schemas": [
    //     {
    //       "fileMatch": ["**/*.openapi.json"],
    //       "url": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/schemas/v3.0/schema.json"
    //     },
    //     {
    //       "fileMatch": ["package.json", "**/package.json"],
    //       "url": "https://yarnpkg.com/configuration/manifest.json"
    //     }
    //   ],

    "js/ts.implicitProjectConfig.strictNullChecks": true,

    // Provide validation for our CI files
    //   "yaml.schemas": {
    //     "https://json.schemastore.org/github-workflow.json": ".github/workflows/*.yml",
    //     "https://yarnpkg.com/configuration/yarnrc.json": ".yarnrc.yml"
    //   },
    //   "yaml.schemaStore.enable": false,

    "npm.packageManager": "yarn",

    "search.exclude": {
      "**/build": true,
      "**/logs": true,
      "**/node_modules": true,
      "**/tmp": true,
      "**/.eslintcache": true,
      "**/coverage": true,
      "**/.yarn": true
    },

    // Javascript settings
    // "javascript.suggest.autoImports": true,
    "javascript.suggest.enabled": true,
    // Typescript settings
    "typescript.enablePromptUseWorkspaceTsdk": true,
    // Suggest that the workspace use the typescript version we use to build and test
    "typescript.tsdk": "./node_modules/typescript/lib",
    "typescript.disableAutomaticTypeAcquisition": true,
    "typescript.implementationsCodeLens.enabled": true,
    "typescript.suggest.completeFunctionCalls": true,
    "typescript.referencesCodeLens.showOnAllFunctions": true,
    "typescript.referencesCodeLens.enabled": true
  }
}
